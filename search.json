[{"path":"https://ssi-dk.github.io/SCDB/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ssi-dk.github.io/SCDB/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/SCDB/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ssi-dk.github.io/SCDB/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ssi-dk.github.io/SCDB/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ssi-dk.github.io/SCDB/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ssi-dk.github.io/SCDB/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ssi-dk.github.io/SCDB/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ssi-dk.github.io/SCDB/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ssi-dk.github.io/SCDB/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ssi-dk.github.io/SCDB/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ssi-dk.github.io/SCDB/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ssi-dk.github.io/SCDB/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ssi-dk.github.io/SCDB/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ssi-dk.github.io/SCDB/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ssi-dk.github.io/SCDB/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ssi-dk.github.io/SCDB/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ssi-dk.github.io/SCDB/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ssi-dk.github.io/SCDB/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ssi-dk.github.io/SCDB/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ssi-dk.github.io/SCDB/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://ssi-dk.github.io/SCDB/PULL_REQUEST_TEMPLATE.html","id":"intent","dir":"","previous_headings":"","what":"Intent","title":"NA","text":"Describe briefly problem pull request resolves, new features introduces. Please link issues possible (see also “Linking pull request issue”). Trivial changes, like fixing typo, need issue.","code":""},{"path":"https://ssi-dk.github.io/SCDB/PULL_REQUEST_TEMPLATE.html","id":"approach","dir":"","previous_headings":"","what":"Approach","title":"NA","text":"issue resolved? Describe approach taken; describe non-obvious considerations made choosing approach. change covered test, please explain .","code":""},{"path":"https://ssi-dk.github.io/SCDB/PULL_REQUEST_TEMPLATE.html","id":"known-issues","dir":"","previous_headings":"","what":"Known issues","title":"NA","text":"known issues introduced pull request, please let us know. Code rarely perfect, pull request still welcome fix bigger new bug.","code":""},{"path":"https://ssi-dk.github.io/SCDB/PULL_REQUEST_TEMPLATE.html","id":"checklist","dir":"","previous_headings":"","what":"Checklist","title":"NA","text":"PR passes local unit tests documented new features introduced PR adds new feature, please add entry NEWS.md reviewer assigned PR","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/SCDB/articles/slowly-changing-dimension.html","id":"type-1-and-type-2-history","dir":"Articles","previous_headings":"","what":"Type 1 and Type 2 history","title":"Slowly Changing Dimension methodology","text":"example, consider following table forecasts number cities: following day, forecasts changed, — barring occasional data hoarder — existing data longer relevant. example, () values Forecast column change regular update. Putting words, table snapshot1 forecasts last time update. following day, forecasts naturally change: choose update forecasts table always contain current data. referred Type 1 methodology (Kimball Ross 2013). Databases thankfully rather efficient way storing accessing data, instead discarding values previous day, append new data previous day. Also, order keep data organized, add column date forecast, aptly named ForecastDate. full table forecasts two days now looks like , slowly building full history forecasts: Managing historical data inserting new data manner often referred Type 2 methodology Type 2 history. table now provides much information user filtering: Now, note forecast Houston changed two days. order keep data minimized possible, modify table , now expanding ForecastDate ForecastFrom ForecastUntil. table forecasts now looks like : now, ForecastUntil value set NA, known rows “expire” (ever). also makes easy identify currently valid data. Adding new column save single row data naturally seems bit overkill, number rows data set increases indefinitely, solutions scales much better.","code":"# Current date: 2023-09-28 forecasts #> # A tibble: 4 × 2 #>   City        Forecast #>   <chr>          <dbl> #> 1 New York          20 #> 2 Los Angeles       23 #> 3 Seattle           16 #> 4 Houston           34 # Current date: 2023-09-29 forecasts2 #> # A tibble: 4 × 2 #>   City        Forecast #>   <chr>          <dbl> #> 1 New York          18 #> 2 Los Angeles       25 #> 3 Seattle           17 #> 4 Houston           34 forecasts_full #> # A tibble: 8 × 3 #>   City        Forecast ForecastDate #>   <chr>          <dbl> <date>       #> 1 New York          20 2023-09-28   #> 2 Los Angeles       23 2023-09-28   #> 3 Seattle           16 2023-09-28   #> 4 Houston           34 2023-09-28   #> 5 New York          18 2023-09-29   #> 6 Los Angeles       25 2023-09-29   #> 7 Seattle           17 2023-09-29   #> 8 Houston           34 2023-09-29 # Current forecasts forecasts_full %>%   slice_max(ForecastDate, n = 1) %>%   select(!\"ForecastDate\") #> # A tibble: 4 × 2 #>   City        Forecast #>   <chr>          <dbl> #> 1 New York          18 #> 2 Los Angeles       25 #> 3 Seattle           17 #> 4 Houston           34  # Forecasts for a given date forecasts_full %>%   filter(ForecastDate == \"2023-09-28\") #> # A tibble: 4 × 3 #>   City        Forecast ForecastDate #>   <chr>          <dbl> <date>       #> 1 New York          20 2023-09-28   #> 2 Los Angeles       23 2023-09-28   #> 3 Seattle           16 2023-09-28   #> 4 Houston           34 2023-09-28  # Full history for a given city forecasts_full %>%   filter(City == \"New York\") #> # A tibble: 2 × 3 #>   City     Forecast ForecastDate #>   <chr>       <dbl> <date>       #> 1 New York       20 2023-09-28   #> 2 New York       18 2023-09-29 forecasts_scd #> # A tibble: 7 × 4 #>   City        Forecast ForecastFrom ForecastUntil #>   <chr>          <dbl> <date>       <date>        #> 1 New York          20 2023-09-28   2023-09-29    #> 2 Los Angeles       23 2023-09-28   2023-09-29    #> 3 Seattle           16 2023-09-28   2023-09-29    #> 4 Houston           34 2023-09-28   NA            #> 5 New York          18 2023-09-29   NA            #> 6 Los Angeles       25 2023-09-29   NA            #> 7 Seattle           17 2023-09-29   NA"},{"path":"https://ssi-dk.github.io/SCDB/articles/slowly-changing-dimension.html","id":"a-timeline-of-timelines","dir":"Articles","previous_headings":"","what":"A “timeline of timelines”","title":"Slowly Changing Dimension methodology","text":"Let’s now introduce additional information see managing slowly changing dimensions enables us easily navigate large amounts data large periods time. Imagine town several thousand citizens, town hall maintaining civil registry names addresses every citizen, updated daily changes submitted citizens, individual identification number.2 data largely static, small fraction citizens move given day, interest keep data relatively --date. managing slowly changing dimension becomes powerful, compared full incremental backups. One day, Alice Doe meets Robert “Bobby” Tables, move together: First thing notice registry updated real-time, citizens may late registering change address. can seen comparing values MovedIn ValidFrom row 4. using Type 2 history, feature correctly replicated reconstructing historical data: words, even though Alice’s address subsequently updated registry, can still see registered living Donut Plains time. modeling “timelines timelines” also called bitemporal modeling. now, things going well Alice Robert; get married, Alice taking Robert’s surname. person lived Robert, day marriage, different name: now also reflected data; MovedIn date persistent across date name change, Surname changes:","code":"addresses #> # A tibble: 4 × 8 #>      ID GivenName Surname Address    MovedIn    MovedOut   ValidFrom  ValidUntil #>   <dbl> <chr>     <chr>   <chr>      <date>     <date>     <date>     <date>     #> 1     1 Alice     Doe     Donut Pla… 1989-06-26 NA         1989-06-26 2021-03-08 #> 2     2 Robert    Tables  Rainbow R… 1989-12-13 NA         1989-12-13 NA         #> 3     1 Alice     Doe     Donut Pla… 1989-06-26 2021-03-01 2021-03-08 NA         #> 4     1 Alice     Doe     Rainbow R… 2021-03-01 NA         2021-03-08 NA slice_timestamp <- \"2021-03-02\"  addresses %>%   filter(ID == 1,          ValidFrom < !!slice_timestamp,          ValidUntil >= !!slice_timestamp | is.na(ValidUntil)) %>%   select(!c(\"ValidFrom\", \"ValidUntil\")) #> # A tibble: 1 × 6 #>      ID GivenName Surname Address        MovedIn    MovedOut #>   <dbl> <chr>     <chr>   <chr>          <date>     <date>   #> 1     1 Alice     Doe     Donut Plains 1 1989-06-26 NA filter(addresses2,        ID == 1,        Address == \"Rainbow Road 8\") %>%   select(ID, GivenName, Surname, MovedIn, MovedOut, ValidFrom, ValidUntil) #> # A tibble: 2 × 7 #>      ID GivenName Surname MovedIn    MovedOut ValidFrom  ValidUntil #>   <dbl> <chr>     <chr>   <date>     <date>   <date>     <date>     #> 1     1 Alice     Doe     2021-03-01 NA       2021-03-08 2023-08-28 #> 2     1 Alice     Tables  2021-03-01 NA       2023-08-28 NA slice_timestamp <- \"2022-03-04\"  addresses2 %>%   filter(Address == \"Rainbow Road 8\",          is.na(MovedOut),          ValidFrom < !!slice_timestamp,          ValidUntil >= !!slice_timestamp | is.na(ValidUntil)) %>%   select(ID, GivenName, Surname, MovedIn, MovedOut) #> # A tibble: 2 × 5 #>      ID GivenName Surname MovedIn    MovedOut #>   <dbl> <chr>     <chr>   <date>     <date>   #> 1     2 Robert    Tables  1989-12-13 NA       #> 2     1 Alice     Doe     2021-03-01 NA  slice_timestamp <- \"2023-09-29\"  addresses2 %>%   filter(Address == \"Rainbow Road 8\",          is.na(MovedOut),          ValidFrom < !!slice_timestamp,          ValidUntil >= !!slice_timestamp | is.na(ValidUntil)) %>%   select(ID, GivenName, Surname, MovedIn, MovedOut) #> # A tibble: 2 × 5 #>      ID GivenName Surname MovedIn    MovedOut #>   <dbl> <chr>     <chr>   <date>     <date>   #> 1     2 Robert    Tables  1989-12-13 NA       #> 2     1 Alice     Tables  2021-03-01 NA"},{"path":"https://ssi-dk.github.io/SCDB/articles/slowly-changing-dimension.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Slowly Changing Dimension methodology","text":"now, hopefully clear managing slowly changing dimension allows access data point (tracked) time potentially avoiding lot data redundancy. now ready get started SCDB package!","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/SCDB/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rasmus Skytte Randløv. Author, maintainer, reviewer. Marcus Munch Grünewald. Author. Lasse Engbo Christiansen. Reviewer. Sofia Myrup Otero. Reviewer. Statens Serum Institut. Copyright holder, funder.","code":""},{"path":"https://ssi-dk.github.io/SCDB/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Randløv R, Grünewald M (2025). SCDB: Easily Access Maintain Time-Based Versioned Data (Slowly-Changing-Dimension). R package version 0.5.0, https://ssi-dk.github.io/SCDB/, https://github.com/ssi-dk/SCDB.","code":"@Manual{,   title = {SCDB: Easily Access and Maintain Time-Based Versioned Data (Slowly-Changing-Dimension)},   author = {Rasmus Skytte Randløv and Marcus Munch Grünewald},   year = {2025},   note = {R package version 0.5.0, https://ssi-dk.github.io/SCDB/},   url = {https://github.com/ssi-dk/SCDB}, }"},{"path":[]},{"path":"https://ssi-dk.github.io/SCDB/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Easily Access and Maintain Time-Based Versioned Data (Slowly-Changing-Dimension)","text":"SCDB package easily maintaining updating data slowly changing dimension. specifically, package facilitates type-2 history data warehouses provide number quality--life improvements working SQL databases within R. better understand slowly changing dimension packages provides , see vignette(\"slowly-changing-dimension\").","code":""},{"path":"https://ssi-dk.github.io/SCDB/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Easily Access and Maintain Time-Based Versioned Data (Slowly-Changing-Dimension)","text":"","code":"# Install SCDB from CRAN: install.packages(\"SCDB\")  # Alternatively, install the development version from github: # install.packages(\"devtools\") devtools::install_github(\"ssi-dk/SCDB\")"},{"path":"https://ssi-dk.github.io/SCDB/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Easily Access and Maintain Time-Based Versioned Data (Slowly-Changing-Dimension)","text":"basic usage examples, see vignette(\"SCDB\").","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Logger: Complete logging to console, file and database — Logger","title":"Logger: Complete logging to console, file and database — Logger","text":"Logger class facilitates logging database /file console. Logger associated specific table timestamp must supplied initialization. information used create log file (log_path given) log entry database (log_table_id log_conn given). Logging database must match fields log table.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logger: Complete logging to console, file and database — Logger","text":"new instance Logger R6 class.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Logger: Complete logging to console, file and database — Logger","text":"output_to_console (logical(1)) Logger output console? Read . can always overridden Logger$log_info(..., output_to_console = FALSE). log_path (character(1)) location log files written (NULL). Defaults getOption(\"SCDB.log_path\"). Read . log_tbl (tbl_dbi(1)) database table used logging. Class connection-specific, inherits tbl_dbi. Read . start_time (POSIXct(1)) time data processing started. Read . log_filename (character(1)) filename (basename) file Logger instance output .  Read . log_realpath (character(1)) full path logger's log file. Read .","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Logger: Complete logging to console, file and database — Logger","text":"Logger$new() Logger$finalize() Logger$log_info() Logger$log_warn() Logger$log_error() Logger$log_to_db() Logger$finalize_db_entry() Logger$clone()","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Logger: Complete logging to console, file and database — Logger","text":"Create new Logger object","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger: Complete logging to console, file and database — Logger","text":"","code":"Logger$new(   db_table = NULL,   timestamp = NULL,   output_to_console = TRUE,   log_table_id = getOption(\"SCDB.log_table_id\"),   log_conn = NULL,   log_path = getOption(\"SCDB.log_path\"),   start_time = Sys.time(),   warn = TRUE )"},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger: Complete logging to console, file and database — Logger","text":"db_table (id-like object(1)) table specification (coercible id()) specifying table updated. timestamp (POSIXct(1), Date(1), character(1)) timestamp describing data processed (current time). output_to_console (logical(1)) Logger output console? log_table_id (id-like object(1)) table specification (coercible id()) specifying location log table. log_conn (DBIConnection(1)) database connection log table exist. log_path (character(1)) path logs stored. NULL, file logs created. start_time (POSIXct(1)) time data processing started (defaults Sys.time()). warn (logical(1)) warning produced logging done?","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"method-finalize-","dir":"Reference","previous_headings":"","what":"Method finalize()","title":"Logger: Complete logging to console, file and database — Logger","text":"Remove generated log_name database writing file.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger: Complete logging to console, file and database — Logger","text":"","code":"Logger$finalize()"},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"method-log-info-","dir":"Reference","previous_headings":"","what":"Method log_info()","title":"Logger: Complete logging to console, file and database — Logger","text":"Write line log (console / file).","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger: Complete logging to console, file and database — Logger","text":"","code":"Logger$log_info(   ...,   tic = Sys.time(),   output_to_console = self$output_to_console,   log_type = \"INFO\",   timestamp_format = getOption(\"SCDB.log_timestamp_format\", \"%F %R:%OS3\") )"},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger: Complete logging to console, file and database — Logger","text":"... (character()) Character strings concatenated log message. tic (POSIXct(1)) timestamp used log entry. output_to_console (logical(1)) line written console? log_type (character(1)) severity log message. timestamp_format (character(1)) format timestamp used log message (parsable strftime()).","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Logger: Complete logging to console, file and database — Logger","text":"Returns log message invisibly","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"method-log-warn-","dir":"Reference","previous_headings":"","what":"Method log_warn()","title":"Logger: Complete logging to console, file and database — Logger","text":"Write warning log file generate warning.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger: Complete logging to console, file and database — Logger","text":"","code":"Logger$log_warn(..., log_type = \"WARNING\")"},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger: Complete logging to console, file and database — Logger","text":"... (character()) Character strings concatenated log message. log_type (character(1)) severity log message.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"method-log-error-","dir":"Reference","previous_headings":"","what":"Method log_error()","title":"Logger: Complete logging to console, file and database — Logger","text":"Write error log file stop execution.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger: Complete logging to console, file and database — Logger","text":"","code":"Logger$log_error(..., log_type = \"ERROR\")"},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger: Complete logging to console, file and database — Logger","text":"... (character()) Character strings concatenated log message. log_type (character(1)) severity log message.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"method-log-to-db-","dir":"Reference","previous_headings":"","what":"Method log_to_db()","title":"Logger: Complete logging to console, file and database — Logger","text":"Write update log table.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger: Complete logging to console, file and database — Logger","text":"","code":"Logger$log_to_db(...)"},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger: Complete logging to console, file and database — Logger","text":"... (Name-value pairs) Structured data written database log table. Name indicates column value indicates value written.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"method-finalize-db-entry-","dir":"Reference","previous_headings":"","what":"Method finalize_db_entry()","title":"Logger: Complete logging to console, file and database — Logger","text":"Auto-fills \"end_time\" \"duration\" log entry clears \"log_file\" field file written.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger: Complete logging to console, file and database — Logger","text":"","code":"Logger$finalize_db_entry(end_time = Sys.time())"},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger: Complete logging to console, file and database — Logger","text":"end_time (POSIXct(1), Date(1), character(1)) end time log entry.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Logger: Complete logging to console, file and database — Logger","text":"objects class cloneable method.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger: Complete logging to console, file and database — Logger","text":"","code":"Logger$clone(deep = FALSE)"},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger: Complete logging to console, file and database — Logger","text":"deep Whether make deep clone.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/Logger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logger: Complete logging to console, file and database — Logger","text":"","code":"logger <- Logger$new(     db_table = \"test.table\",     timestamp = \"2020-01-01 09:00:00\"   ) #> Warning: `log_path` and `log_tbl` are both `NULL` and therefore NO file or database logging will be done. #> Consider adding options SCDB.log_table_id and/or SCDB.log_path to your .Rprofile    logger$log_info(\"This is an info message\") #> 2025-02-03 13:45:00.552 - runner - INFO - This is an info message   logger$log_to_db(message = \"This is a message\")    try(logger$log_warn(\"This is a warning!\")) #> Warning: 2025-02-03 13:45:00.554 - runner - WARNING - This is a warning!   try(logger$log_error(\"This is an error!\")) #> Error in logger$log_error(\"This is an error!\") :  #>   2025-02-03 13:45:00.554 - runner - ERROR - This is an error!"},{"path":"https://ssi-dk.github.io/SCDB/reference/LoggerNull.html","id":null,"dir":"Reference","previous_headings":"","what":"LoggerNull: The no-logging Logger — LoggerNull","title":"LoggerNull: The no-logging Logger — LoggerNull","text":"LoggerNull class overwrites functions Logger logging produced. Errors warnings still produced.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/LoggerNull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LoggerNull: The no-logging Logger — LoggerNull","text":"new instance LoggerNull R6 class.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/LoggerNull.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"LoggerNull: The no-logging Logger — LoggerNull","text":"SCDB::Logger -> LoggerNull","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/LoggerNull.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"LoggerNull: The no-logging Logger — LoggerNull","text":"SCDB::Logger$finalize() SCDB::Logger$log_error() SCDB::Logger$log_info() SCDB::Logger$log_warn()","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/LoggerNull.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"LoggerNull: The no-logging Logger — LoggerNull","text":"LoggerNull$new() LoggerNull$log_to_db() LoggerNull$finalize_db_entry() LoggerNull$clone()","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/LoggerNull.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"LoggerNull: The no-logging Logger — LoggerNull","text":"Create new LoggerNull object","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/LoggerNull.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LoggerNull: The no-logging Logger — LoggerNull","text":"","code":"LoggerNull$new(...)"},{"path":"https://ssi-dk.github.io/SCDB/reference/LoggerNull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LoggerNull: The no-logging Logger — LoggerNull","text":"... Captures arguments given, nothing","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/LoggerNull.html","id":"method-log-to-db-","dir":"Reference","previous_headings":"","what":"Method log_to_db()","title":"LoggerNull: The no-logging Logger — LoggerNull","text":"Matches signature Logger$log_to_db(), nothing.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/LoggerNull.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"LoggerNull: The no-logging Logger — LoggerNull","text":"","code":"LoggerNull$log_to_db(...)"},{"path":"https://ssi-dk.github.io/SCDB/reference/LoggerNull.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"LoggerNull: The no-logging Logger — LoggerNull","text":"... Captures arguments given, nothing","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/LoggerNull.html","id":"method-finalize-db-entry-","dir":"Reference","previous_headings":"","what":"Method finalize_db_entry()","title":"LoggerNull: The no-logging Logger — LoggerNull","text":"Matches signature Logger$finalize_db_entry(), nothing.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/LoggerNull.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"LoggerNull: The no-logging Logger — LoggerNull","text":"","code":"LoggerNull$finalize_db_entry(...)"},{"path":"https://ssi-dk.github.io/SCDB/reference/LoggerNull.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"LoggerNull: The no-logging Logger — LoggerNull","text":"... Captures arguments given, nothing","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/LoggerNull.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"LoggerNull: The no-logging Logger — LoggerNull","text":"objects class cloneable method.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/LoggerNull.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"LoggerNull: The no-logging Logger — LoggerNull","text":"","code":"LoggerNull$clone(deep = FALSE)"},{"path":"https://ssi-dk.github.io/SCDB/reference/LoggerNull.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"LoggerNull: The no-logging Logger — LoggerNull","text":"deep Whether make deep clone.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/LoggerNull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LoggerNull: The no-logging Logger — LoggerNull","text":"","code":"logger <- LoggerNull$new()    logger$log_info(\"This message will not print!\")   logger$log_to_db(message = \"This message will no be written in database!\")   try(logger$log_warn(\"This is a warning!\")) #> Warning: 2025-02-03 13:45:01.191 - runner - WARNING - This is a warning!   try(logger$log_error(\"This is an error!\")) #> Error in logger$log_error(\"This is an error!\") :  #>   2025-02-03 13:45:01.192 - runner - ERROR - This is an error!"},{"path":"https://ssi-dk.github.io/SCDB/reference/SCDB-package.html","id":null,"dir":"Reference","previous_headings":"","what":"SCDB: Easily Access and Maintain Time-Based Versioned Data (Slowly-Changing-Dimension) — SCDB-package","title":"SCDB: Easily Access and Maintain Time-Based Versioned Data (Slowly-Changing-Dimension) — SCDB-package","text":"collection functions enable easy access updating database data time. specifically, package facilitates type-2 history data-warehouses provides number Quality life improvements working SQL databases R. reference see Ralph Kimball Margy Ross (2013, ISBN 9781118530801).","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/SCDB/reference/SCDB-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SCDB: Easily Access and Maintain Time-Based Versioned Data (Slowly-Changing-Dimension) — SCDB-package","text":"Maintainer: Rasmus Skytte Randløv rske@ssi.dk (ORCID) [reviewer] Authors: Marcus Munch Grünewald (ORCID) contributors: Lasse Engbo Christiansen lsec@ssi.dk (ORCID) [reviewer] Sofia Myrup Otero smot@ssi.dk [reviewer] Statens Serum Institut [copyright holder, funder]","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/close_connection.html","id":null,"dir":"Reference","previous_headings":"","what":"Close connection to the database — close_connection","title":"Close connection to the database — close_connection","text":"Close connection database","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/close_connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Close connection to the database — close_connection","text":"","code":"close_connection(conn)"},{"path":"https://ssi-dk.github.io/SCDB/reference/close_connection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Close connection to the database — close_connection","text":"conn (DBIConnection(1)) Connection object.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/close_connection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Close connection to the database — close_connection","text":"dbDisconnect() returns TRUE, invisibly.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/close_connection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Close connection to the database — close_connection","text":"","code":"conn <- get_connection()    close_connection(conn)"},{"path":"https://ssi-dk.github.io/SCDB/reference/create_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the indexes on table — create_index","title":"Create the indexes on table — create_index","text":"Create indexes table","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/create_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the indexes on table — create_index","text":"","code":"create_index(conn, db_table, columns)"},{"path":"https://ssi-dk.github.io/SCDB/reference/create_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the indexes on table — create_index","text":"conn (DBIConnection) connection database. db_table (id-like object(1)) table specification (coercible id()). columns (character()) columns unique.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/create_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the indexes on table — create_index","text":"NULL (called side effects)","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/create_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the indexes on table — create_index","text":"","code":"conn <- get_connection()    mt <- dplyr::copy_to(conn, dplyr::distinct(mtcars, .data$mpg, .data$cyl), name = \"mtcars\")   create_index(conn, mt, c(\"mpg\", \"cyl\")) #> [1] 0    close_connection(conn)"},{"path":"https://ssi-dk.github.io/SCDB/reference/create_logs_if_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a table with the SCDB log structure if it does not exists — create_logs_if_missing","title":"Create a table with the SCDB log structure if it does not exists — create_logs_if_missing","text":"Create table SCDB log structure exists","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/create_logs_if_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a table with the SCDB log structure if it does not exists — create_logs_if_missing","text":"","code":"create_logs_if_missing(conn, log_table)"},{"path":"https://ssi-dk.github.io/SCDB/reference/create_logs_if_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a table with the SCDB log structure if it does not exists — create_logs_if_missing","text":"conn (DBIConnection(1)) Connection object. log_table (id-like object) table specification logs exist (coercible id()).","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/create_logs_if_missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a table with the SCDB log structure if it does not exists — create_logs_if_missing","text":"Invisibly returns generated (existing) log table.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/create_logs_if_missing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a table with the SCDB log structure if it does not exists — create_logs_if_missing","text":"","code":"conn <- get_connection()   log_table <- id(\"test.logs\", conn = conn, allow_table_only = TRUE)    create_logs_if_missing(conn, log_table) #> # Source:   table<`main`.`test.logs`> [?? x 11] #> # Database: sqlite 3.47.1 [:memory:] #> # ℹ 11 variables: date <dbl>, schema <chr>, table <chr>, n_insertions <int>, #> #   n_deactivations <int>, start_time <dbl>, end_time <dbl>, duration <chr>, #> #   success <int>, message <chr>, log_file <chr>    close_connection(conn)"},{"path":"https://ssi-dk.github.io/SCDB/reference/create_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a historical table from input data — create_table","title":"Create a historical table from input data — create_table","text":"Create historical table input data","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/create_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a historical table from input data — create_table","text":"","code":"create_table(.data, conn = NULL, db_table, ...)"},{"path":"https://ssi-dk.github.io/SCDB/reference/create_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a historical table from input data — create_table","text":".data (data.frame(1), tibble(1), data.table(1), tbl_dbi(1)) Data object. conn (DBIConnection(1)) Connection object. db_table (id-like object(1)) table specification (coercible id()). ... arguments passed DBI::dbCreateTable().","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/create_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a historical table from input data — create_table","text":"Invisibly returns table looks destination (locally conn NULL).","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/create_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a historical table from input data — create_table","text":"","code":"conn <- get_connection()    create_table(mtcars, conn = conn, db_table = \"mtcars\")    close_connection(conn)"},{"path":"https://ssi-dk.github.io/SCDB/reference/db_locks.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets, queries and removes locks for database tables — db_locks","title":"Sets, queries and removes locks for database tables — db_locks","text":"set function adds simple locking system database tables. lock_table() adds record schema.locks table current time R-session process id. unlock_table() removes records schema.locks table target table R-session process id. locking table, function check existing locks table produce error lock held process longer exists. case, lock needs removed manually removing record lock table. addition, error implies table may partial updates needs manually rolled back.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/db_locks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets, queries and removes locks for database tables — db_locks","text":"","code":"lock_table(conn, db_table, schema = NULL)  unlock_table(conn, db_table, schema = NULL, pid = Sys.getpid())"},{"path":"https://ssi-dk.github.io/SCDB/reference/db_locks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets, queries and removes locks for database tables — db_locks","text":"conn (DBIConnection(1)) Connection object. db_table (character(1)) specification \"schema.table\" modify lock . schema (character(1)) schema \"locks\" table created. pid (numeric(1)) process id remove lock .","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/db_locks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets, queries and removes locks for database tables — db_locks","text":"lock_table() returns TRUE (FALSE) lock (un)successfully added. lock exists non-active process, error thrown. unlock_table() returns NULL (called side effects).","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/db_locks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets, queries and removes locks for database tables — db_locks","text":"","code":"conn <- DBI::dbConnect(RSQLite::SQLite())    lock_table(conn, \"test_table\") # TRUE #> [1] TRUE    unlock_table(conn, \"test_table\") #> NULL    DBI::dbDisconnect(conn)"},{"path":"https://ssi-dk.github.io/SCDB/reference/db_timestamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the type of timestamps the database supports — db_timestamp","title":"Determine the type of timestamps the database supports — db_timestamp","text":"Determine type timestamps database supports","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/db_timestamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the type of timestamps the database supports — db_timestamp","text":"","code":"db_timestamp(timestamp, conn = NULL)"},{"path":"https://ssi-dk.github.io/SCDB/reference/db_timestamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the type of timestamps the database supports — db_timestamp","text":"timestamp (POSIXct(1) character(1)) timestamp transformed database type. conn (DBIConnection(1)) Connection object.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/db_timestamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the type of timestamps the database supports — db_timestamp","text":"given timestamp converted SQL-backend dependent timestamp.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/db_timestamp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine the type of timestamps the database supports — db_timestamp","text":"","code":"conn <- get_connection()    db_timestamp(Sys.time(), conn) #> <SQL> '2025-02-03 13:45:03'    close_connection(conn)"},{"path":"https://ssi-dk.github.io/SCDB/reference/defer_db_cleanup.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete table at function exit — defer_db_cleanup","title":"Delete table at function exit — defer_db_cleanup","text":"function marks table deletion current function exits.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/defer_db_cleanup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete table at function exit — defer_db_cleanup","text":"","code":"defer_db_cleanup(db_table)"},{"path":"https://ssi-dk.github.io/SCDB/reference/defer_db_cleanup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete table at function exit — defer_db_cleanup","text":"db_table (tbl_sql) unmanipulated reference sql table.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/defer_db_cleanup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete table at function exit — defer_db_cleanup","text":"NULL (called side effects)","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/defer_db_cleanup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete table at function exit — defer_db_cleanup","text":"","code":"conn <- get_connection()    mt <- dplyr::copy_to(conn, mtcars)   id_mt <- id(mt)    defer_db_cleanup(mt)    DBI::dbExistsTable(conn, id_mt) # TRUE #> [1] FALSE    withr::deferred_run() #> No deferred expressions to run    DBI::dbExistsTable(conn, id_mt) # FALSE #> [1] FALSE    close_connection(conn)"},{"path":"https://ssi-dk.github.io/SCDB/reference/digest_to_checksum.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes an checksum from columns — digest_to_checksum","title":"Computes an checksum from columns — digest_to_checksum","text":"Computes checksum columns","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/digest_to_checksum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes an checksum from columns — digest_to_checksum","text":"","code":"digest_to_checksum(.data, col = \"checksum\", exclude = NULL)"},{"path":"https://ssi-dk.github.io/SCDB/reference/digest_to_checksum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes an checksum from columns — digest_to_checksum","text":".data (data.frame(1), tibble(1), data.table(1), tbl_dbi(1)) Data object. col (character(1)) Name column put checksums . generated missing. exclude (character()) Columns exclude checksum generation.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/digest_to_checksum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes an checksum from columns — digest_to_checksum","text":".data checksum column added.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/digest_to_checksum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computes an checksum from columns — digest_to_checksum","text":"cases, md5 algorithm used compute checksums. Microsoft SQL Server, SHA-256 algorithm used.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/digest_to_checksum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes an checksum from columns — digest_to_checksum","text":"","code":"digest_to_checksum(mtcars) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #>                                             checksum #> Mazda RX4           cc15ed979f975a3146e36b47b2ab0ebf #> Mazda RX4 Wag       9738c8ae1037fa9f686c4de092f2cb4b #> Datsun 710          01524a6ad903dccc72597f9dec5b925f #> Hornet 4 Drive      096336924b8ef0abb69ce48fa8e967b7 #> Hornet Sportabout   156d66b5a25c6432856113300fafb9e1 #> Valiant             07b710a4eb565552a9368910b582a9ca #> Duster 360          1855f1a3577b214fc997ee8f8d6fa4b0 #> Merc 240D           476a317a1bfc11bc14cb733b0c7ec648 #> Merc 230            f6801ecb87a9ac46e52167436073ff7a #> Merc 280            d0d16567f6feb2749fbd851cf5933611 #> Merc 280C           96e1ac29420f4b2bdf0d44d213523f3a #> Merc 450SE          0d6f19a3b4e6d345856e25721541d50e #> Merc 450SL          8a22bd4e61cede746156a197c9167b35 #> Merc 450SLC         7cde159b5d54d8456510287d592e177c #> Cadillac Fleetwood  c7c23741b3b507260200a7f0dd460c9c #> Lincoln Continental 8ca072e4dead5168faf744a64158a7fc #> Chrysler Imperial   f51de5b8dcb7c9cb42d241a5a88aa627 #> Fiat 128            438ba093f9a6b70c6e299f441e6b1a78 #> Honda Civic         f290c1c19224018b951fae74e54aeae9 #> Toyota Corolla      2c7a947184089c1e417840ddd01f4d76 #> Toyota Corona       37fc848c004b4e1108097213cf3254d9 #> Dodge Challenger    766486bd531e78bff5cda183321b38b1 #> AMC Javelin         2b3d01c07a9797c8eda0e41d730e9cf1 #> Camaro Z28          20e47bc65cfbfac2f39e76b8317228c0 #> Pontiac Firebird    6a823af356328cddf9113d76d0f29354 #> Fiat X1-9           3f0d3eb97097b28139b69c744ffd74b7 #> Porsche 914-2       403acdf33454004fad2aba60d863e273 #> Lotus Europa        0f5e497657ffd117f2354d39c4164ecd #> Ford Pantera L      7232cf3cf178c45559cf020a7c8bdfb7 #> Ferrari Dino        96739c21cfe5d9939591c7c257a6fe77 #> Maserati Bora       6f492f2bc98fddc742d8b1f277861980 #> Volvo 142E          f390bc2b5608f4d23ad34b39d0b1d636"},{"path":"https://ssi-dk.github.io/SCDB/reference/filter_keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Filters .data according to all records in the filter — filter_keys","title":"Filters .data according to all records in the filter — filter_keys","text":"filters NULL, filtering done. Otherwise, .data object filtered via inner_join() using columns filter: inner_join(.data, filter, = colnames(filter)) na_by can overwrite inner_join() columns used filtering.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/filter_keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filters .data according to all records in the filter — filter_keys","text":"","code":"filter_keys(.data, filters, by = NULL, na_by = NULL, ...)"},{"path":"https://ssi-dk.github.io/SCDB/reference/filter_keys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filters .data according to all records in the filter — filter_keys","text":".data (data.frame(1), tibble(1), data.table(1), tbl_dbi(1)) Data object. filters (data.frame(1), tibble(1), data.table(1), tbl_dbi(1)) object subset data . filters NULL, filtering occurs. Otherwise, inner_join() performed using columns filter object. join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). na_by (character()) Columns NA match NA. ... arguments passed dplyr::inner_join().","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/filter_keys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filters .data according to all records in the filter — filter_keys","text":"object class .data","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/filter_keys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filters .data according to all records in the filter — filter_keys","text":"","code":"# Filtering with null means no filtering is done   filter <- NULL   identical(filter_keys(mtcars, filter), mtcars) # TRUE #> [1] TRUE    # Filtering by vs = 0   filter <- data.frame(vs = 0)   identical(filter_keys(mtcars, filter), dplyr::filter(mtcars, vs == 0)) # TRUE #> [1] FALSE    # Filtering by the specific combinations of vs = 0 and am = 1   filter <- dplyr::distinct(mtcars, vs, am)   filter_keys(mtcars, filter) #>     mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> 2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> 3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> 5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> 6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> 7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> 8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> 9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> 10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> 11 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> 12 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> 13 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> 14 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> 15 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> 16 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> 17 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> 18 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> 19 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> 20 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> 21 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> 22 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> 23 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> 24 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> 25 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> 26 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> 27 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> 28 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> 29 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> 30 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> 31 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> 32 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"},{"path":"https://ssi-dk.github.io/SCDB/reference/get_connection.html","id":null,"dir":"Reference","previous_headings":"","what":"Opens connection to the database — get_connection","title":"Opens connection to the database — get_connection","text":"convenience wrapper DBI::dbConnect() different database backends. Connects specified dbname host:port using user password given arguments (applicable). Certain drivers may use credentials stored file, ~/.pgpass (PostgreSQL).","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/get_connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Opens connection to the database — get_connection","text":"","code":"get_connection(drv, ...)  # S3 method for class 'SQLiteDriver' get_connection(   drv,   dbname = \":memory:\",   ...,   bigint = c(\"integer\", \"bigint64\", \"numeric\", \"character\") )  # S3 method for class 'PqDriver' get_connection(   drv,   dbname = NULL,   host = NULL,   port = NULL,   password = NULL,   user = NULL,   ...,   bigint = c(\"integer\", \"bigint64\", \"numeric\", \"character\"),   check_interrupts = TRUE,   timezone = Sys.timezone(),   timezone_out = Sys.timezone() )  # S3 method for class 'OdbcDriver' get_connection(   drv,   dsn = NULL,   ...,   bigint = c(\"integer\", \"bigint64\", \"numeric\", \"character\"),   timezone = Sys.timezone(),   timezone_out = Sys.timezone() )  # S3 method for class 'duckdb_driver' get_connection(   drv,   dbdir = \":memory:\",   ...,   bigint = c(\"numeric\", \"character\"),   timezone_out = Sys.timezone() )  # Default S3 method get_connection(drv, ...)"},{"path":"https://ssi-dk.github.io/SCDB/reference/get_connection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Opens connection to the database — get_connection","text":"drv (DBIDriver(1) DBIConnection(1)) driver connection (defaults SQLiteDriver). ... Additional parameters sent DBI::dbConnect(). dbname (character(1)) Name database located host. bigint (character(1)) datatype convert integers . Support depends database backend. host (character(1)) ip host connect . port (numeric(1) character(1)) Host port connect . password (character(1)) Password login . user (character(1)) Username login . check_interrupts (logical(1)) user interrupts checked query execution? timezone (character(1)) Sets timezone DBI::dbConnect(). Must OlsonNames(). timezone_out (character(1)) Sets timezone_out DBI::dbConnect(). Must OlsonNames(). dsn (character(1)) data source name connect . dbdir (character(1)) directory database located.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/get_connection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Opens connection to the database — get_connection","text":"object inherits DBIConnection driver specified drv.","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/SCDB/reference/get_connection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Opens connection to the database — get_connection","text":"","code":"conn <- get_connection(drv = RSQLite::SQLite(), dbname = \":memory:\")    DBI::dbIsValid(conn) # TRUE #> [1] TRUE    close_connection(conn)    DBI::dbIsValid(conn) # FALSE #> [1] FALSE"},{"path":"https://ssi-dk.github.io/SCDB/reference/get_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the current schema/catalog of a database-related objects — get_catalog","title":"Get the current schema/catalog of a database-related objects — get_catalog","text":"Get current schema/catalog database-related objects","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/get_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the current schema/catalog of a database-related objects — get_catalog","text":"","code":"get_catalog(obj, ...)  # S3 method for class '`Microsoft SQL Server`' get_catalog(obj, temporary = FALSE, ...)  get_schema(obj, ...)  # S3 method for class 'PqConnection' get_schema(obj, temporary = FALSE, ...)  # S3 method for class 'SQLiteConnection' get_schema(obj, temporary = FALSE, ...)"},{"path":"https://ssi-dk.github.io/SCDB/reference/get_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the current schema/catalog of a database-related objects — get_catalog","text":"obj (DBIConnection(1), tbl_dbi(1), Id(1)) object retrieve schema/catalog. ... arguments passed methods. temporary (logical(1))  reference temporary schema/catalog?","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/get_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the current schema/catalog of a database-related objects — get_catalog","text":"catalog extracted obj depending type input: get_catalog.Microsoft SQL Server, current database context connection \"tempdb\" temporary = TRUE. get_schema.tbl_dbi catalog determined via id(). get_catalog.\\\\*, NULL returned. schema extracted obj depending type input: get_schema.DBIConnection(), current schema connection temporary = FALSE. See \"Default schema\" . temporary = TRUE, temporary schema connection returned. get_schema.tbl_dbi() schema determined via id(). get_schema.Id(), schema extracted Id specification.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/get_schema.html","id":"default-schema","dir":"Reference","previous_headings":"","what":"Default schema","title":"Get the current schema/catalog of a database-related objects — get_catalog","text":"backends, possible modify settings schema explicitly stated query, backend searches table schema default. Postgres databases, can shown SELECT CURRENT_SCHEMA() (defaults public) modified SET search_path { schema }. SQLite databases, temp schema temporary tables always exists well main schema permanent tables. Additional databases may attached connection named schema, attachment must made connection established, get_schema never return , default schema always main.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/get_schema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the current schema/catalog of a database-related objects — get_catalog","text":"","code":"conn <- get_connection()    dplyr::copy_to(conn, mtcars, name = \"mtcars\", temporary = FALSE)    get_schema(conn) #> [1] \"main\"   get_schema(get_table(conn, id(\"mtcars\", conn = conn))) #> [1] \"main\"    get_catalog(conn) #> NULL   get_catalog(get_table(conn, id(\"mtcars\", conn = conn))) #> NULL    close_connection(conn)"},{"path":"https://ssi-dk.github.io/SCDB/reference/get_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves a named table from a given schema on the connection — get_table","title":"Retrieves a named table from a given schema on the connection — get_table","text":"Retrieves named table given schema connection","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/get_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves a named table from a given schema on the connection — get_table","text":"","code":"get_table(conn, db_table = NULL, slice_ts = NA, include_slice_info = FALSE)"},{"path":"https://ssi-dk.github.io/SCDB/reference/get_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves a named table from a given schema on the connection — get_table","text":"conn (DBIConnection(1)) Connection object. db_table (id-like object(1)) table specification (coercible id()). missing, list available tables printed. slice_ts (POSIXct(1), Date(1), character(1)) set different NA (default), returned data looks given date. set NULL, data returned. include_slice_info (logical(1)) history columns \"checksum\", \"from_ts\", \"until_ts\" also returned?","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/get_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves a named table from a given schema on the connection — get_table","text":"\"lazy\" data.frame (tbl_lazy) generated using dbplyr. Note temporary table preferred ordinary tables default schema (see get_schema()) identical name.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/get_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieves a named table from a given schema on the connection — get_table","text":"","code":"conn <- get_connection()    dplyr::copy_to(conn, mtcars, name = \"mtcars\", temporary = FALSE)    get_table(conn) #> Select one of the following tables: #>   schema  table #> 1   main mtcars   if (table_exists(conn, \"mtcars\")) {     get_table(conn, \"mtcars\")   } #> # Source:   table<`main`.`mtcars`> [?? x 11] #> # Database: sqlite 3.47.1 [:memory:] #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ more rows    close_connection(conn)"},{"path":"https://ssi-dk.github.io/SCDB/reference/get_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"List the available tables on the connection — get_tables","title":"List the available tables on the connection — get_tables","text":"List available tables connection","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/get_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the available tables on the connection — get_tables","text":"","code":"get_tables(conn, pattern = NULL, show_temporary = TRUE)"},{"path":"https://ssi-dk.github.io/SCDB/reference/get_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the available tables on the connection — get_tables","text":"conn (DBIConnection(1)) Connection object. pattern (character(1)) Regex pattern subset returned tables. show_temporary (logical(1)) temporary tables listed?","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/get_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the available tables on the connection — get_tables","text":"data.frame containing table names including schema (catalog available) database.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/get_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the available tables on the connection — get_tables","text":"","code":"conn <- get_connection()    dplyr::copy_to(conn, mtcars, name = \"my_test_table_1\", temporary = FALSE)   dplyr::copy_to(conn, mtcars, name = \"my_test_table_2\")    get_tables(conn, pattern = \"my_[th]est\") #>   schema           table #> 1   main my_test_table_1 #> 2   temp my_test_table_2   get_tables(conn, pattern = \"my_[th]est\", show_temporary = FALSE) #>   schema           table #> 1   main my_test_table_1    close_connection(conn)"},{"path":"https://ssi-dk.github.io/SCDB/reference/id.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience function for DBI::Id — id","title":"Convenience function for DBI::Id — id","text":"Convenience function DBI::Id","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience function for DBI::Id — id","text":"","code":"id(db_table, ...)  # S3 method for class 'Id' id(db_table, conn = NULL, ...)  # S3 method for class 'character' id(db_table, conn = NULL, allow_table_only = TRUE, ...)  # S3 method for class 'data.frame' id(db_table, ...)"},{"path":"https://ssi-dk.github.io/SCDB/reference/id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience function for DBI::Id — id","text":"db_table (id-like object(1)) table specification (coercible id()). ... arguments passed methods. conn (DBIConnection(1)) Connection object. allow_table_only (logical(1)) TRUE, allows returning DBI::Id table = \"myschema.table\" schema \"myschema\" found conn. FALSE, function raise error implied schema found conn.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience function for DBI::Id — id","text":"DBI::Id object parsed db_table (see details).","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/id.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convenience function for DBI::Id — id","text":"given db_table parsed DBI::Id depending type input: character: db_table parsed DBI::Id object using assumption \"schema.table\" syntax corresponding schema (found conn) table values. schema implied, default schema conn used. DBI::Id: schema specified Id, schema set default schema conn (given). tbl_sql: remote name used resolve table identification. data.frame: Id built data.frame (columns catalog, schema, table). Can used conjunction get_tables(conn, pattern).","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/SCDB/reference/id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convenience function for DBI::Id — id","text":"","code":"id(\"schema.table\") #> <Id> \"schema\".\"table\""},{"path":"https://ssi-dk.github.io/SCDB/reference/interlace.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine any number of tables, where each has their own time axis of validity — interlace","title":"Combine any number of tables, where each has their own time axis of validity — interlace","text":"function \"interlaces\" queries combines validity time axes (valid_from valid_until) onto single time axis.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/interlace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine any number of tables, where each has their own time axis of validity — interlace","text":"","code":"interlace(tables, by = NULL, colnames = NULL)"},{"path":"https://ssi-dk.github.io/SCDB/reference/interlace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine any number of tables, where each has their own time axis of validity — interlace","text":"tables (list(tbl_dbi(1))) historical tables combine. (character()) variable merge . colnames (named list()) time axes validity called \"valid_to\" \"valid_until\" inside tbl_dbi, can specify names supplying arguments list: e.g. c(t1.= \"\\<colname\\>\", t2.= \"\\<colname\\>\"). colnames must named order given tables (.e. t1, t2, t3, ...).","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/interlace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine any number of tables, where each has their own time axis of validity — interlace","text":"combination input queries single, interlaced valid_from / valid_until time axis.","code":"The combination of input queries with a single, interlaced              valid_from / valid_until time axis"},{"path":"https://ssi-dk.github.io/SCDB/reference/interlace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine any number of tables, where each has their own time axis of validity — interlace","text":"","code":"conn <- get_connection()    t1 <- data.frame(key = c(\"A\", \"A\", \"B\"),                    obs_1   = c(1, 2, 2),                    valid_from  = as.Date(c(\"2021-01-01\", \"2021-02-01\", \"2021-01-01\")),                    valid_until = as.Date(c(\"2021-02-01\", \"2021-03-01\", NA)))   t1 <- dplyr::copy_to(conn, df = t1, name = \"t1\")    t2 <- data.frame(key = c(\"A\", \"B\"),                    obs_2 = c(\"a\", \"b\"),                    valid_from  = as.Date(c(\"2021-01-01\", \"2021-01-01\")),                    valid_until = as.Date(c(\"2021-04-01\", NA)))   t2 <- dplyr::copy_to(conn, df = t2, name = \"t2\")    interlace(list(t1, t2), by = \"key\") #> # Source:     SQL [?? x 5] #> # Database:   sqlite 3.47.1 [:memory:] #> # Ordered by: valid_from #>   key   obs_1 obs_2 valid_from valid_until #>   <chr> <dbl> <chr>      <dbl>       <dbl> #> 1 A         1 a          18628       18659 #> 2 A         2 a          18659       18687 #> 3 A        NA a          18687       18718 #> 4 B         2 b          18628          NA    close_connection(conn)"},{"path":"https://ssi-dk.github.io/SCDB/reference/is.historical.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if table contains historical data — is.historical","title":"Checks if table contains historical data — is.historical","text":"Checks table contains historical data","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/is.historical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if table contains historical data — is.historical","text":"","code":"is.historical(.data)"},{"path":"https://ssi-dk.github.io/SCDB/reference/is.historical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if table contains historical data — is.historical","text":".data (data.frame(1), tibble(1), data.table(1), tbl_dbi(1)) Data object.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/is.historical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if table contains historical data — is.historical","text":"TRUE .data contains columns: \"checksum\", \"from_ts\", \"until_ts\". FALSE otherwise.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/is.historical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if table contains historical data — is.historical","text":"","code":"conn <- get_connection()    dplyr::copy_to(conn, mtcars, name = \"mtcars\", temporary = FALSE)   create_table(mtcars, conn, db_table = id(\"mtcars_historical\", conn))    is.historical(get_table(conn, \"mtcars\")) # FALSE #> [1] FALSE   is.historical(get_table(conn, \"mtcars_historical\")) # TRUE #> [1] FALSE    close_connection(conn)"},{"path":"https://ssi-dk.github.io/SCDB/reference/joins.html","id":null,"dir":"Reference","previous_headings":"","what":"SQL Joins — joins","title":"SQL Joins — joins","text":"Overloads dplyr *_join accept na_by argument. default, joining using SQL match NA / NULL. dbplyr *_joins option \"na_matches = na\" match NA / NULL inefficient cases. function matching efficiently: column contains NA / NULL, names columns can passed via na_by argument efficiently match \"na_matches = na\". na_by argument given given, function defaults using dplyr::*_join.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/joins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SQL Joins — joins","text":"","code":"# S3 method for class 'tbl_sql' inner_join(x, y, by = NULL, ...)  # S3 method for class 'tbl_sql' left_join(x, y, by = NULL, ...)  # S3 method for class 'tbl_sql' right_join(x, y, by = NULL, ...)  # S3 method for class 'tbl_sql' full_join(x, y, by = NULL, ...)  # S3 method for class 'tbl_sql' semi_join(x, y, by = NULL, ...)  # S3 method for class 'tbl_sql' anti_join(x, y, by = NULL, ...)"},{"path":"https://ssi-dk.github.io/SCDB/reference/joins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SQL Joins — joins","text":"x, y pair lazy data frames backed database queries. join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). ... parameters passed onto methods.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/joins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SQL Joins — joins","text":"Another tbl_lazy. Use show_query() see generated query, use collect() execute query return data R.","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/SCDB/reference/joins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SQL Joins — joins","text":"","code":"library(dplyr, warn.conflicts = FALSE)   library(dbplyr, warn.conflicts = FALSE)    band_db <- tbl_memdb(dplyr::band_members)   instrument_db <- tbl_memdb(dplyr::band_instruments)    left_join(band_db, instrument_db) %>%     show_query() #> Joining with `by = join_by(name)` #> <SQL> #> SELECT `dplyr::band_members`.*, `plays` #> FROM `dplyr::band_members` #> LEFT JOIN `dplyr::band_instruments` #>   ON (`dplyr::band_members`.`name` = `dplyr::band_instruments`.`name`)    # Can join with local data frames by setting copy = TRUE   left_join(band_db, dplyr::band_instruments, copy = TRUE) #> Joining with `by = join_by(name)` #> # Source:   SQL [?? x 3] #> # Database: sqlite 3.47.1 [:memory:] #>   name  band    plays  #>   <chr> <chr>   <chr>  #> 1 Mick  Stones  NA     #> 2 John  Beatles guitar #> 3 Paul  Beatles bass      # Unlike R, joins in SQL don't usually match NAs (NULLs)   db <- memdb_frame(x = c(1, 2, NA))   label <- memdb_frame(x = c(1, NA), label = c(\"one\", \"missing\"))   left_join(db, label, by = \"x\") #> # Source:   SQL [?? x 2] #> # Database: sqlite 3.47.1 [:memory:] #>       x label #>   <dbl> <chr> #> 1     1 one   #> 2     2 NA    #> 3    NA NA       # But you can activate R's usual behaviour with the na_matches argument   left_join(db, label, by = \"x\", na_matches = \"na\") #> # Source:   SQL [?? x 2] #> # Database: sqlite 3.47.1 [:memory:] #>       x label   #>   <dbl> <chr>   #> 1     1 one     #> 2     2 NA      #> 3    NA missing    # By default, joins are equijoins, but you can use `sql_on` to   # express richer relationships   db1 <- memdb_frame(x = 1:5)   db2 <- memdb_frame(x = 1:3, y = letters[1:3])    left_join(db1, db2) %>% show_query() #> Joining with `by = join_by(x)` #> <SQL> #> SELECT `dbplyr_iPlfS5HbOG`.`x` AS `x`, `y` #> FROM `dbplyr_iPlfS5HbOG` #> LEFT JOIN `dbplyr_nPPoHufP8g` #>   ON (`dbplyr_iPlfS5HbOG`.`x` = `dbplyr_nPPoHufP8g`.`x`)   left_join(db1, db2, sql_on = \"LHS.x < RHS.x\") %>% show_query() #> <SQL> #> SELECT `LHS`.`x` AS `x.x`, `RHS`.`x` AS `x.y`, `y` #> FROM `dbplyr_iPlfS5HbOG` AS `LHS` #> LEFT JOIN `dbplyr_nPPoHufP8g` AS `RHS` #>   ON (LHS.x < RHS.x)"},{"path":"https://ssi-dk.github.io/SCDB/reference/nrow.html","id":null,"dir":"Reference","previous_headings":"","what":"nrow() but also works on remote tables — nrow","title":"nrow() but also works on remote tables — nrow","text":"nrow() also works remote tables","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/nrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nrow() but also works on remote tables — nrow","text":"","code":"nrow(.data)"},{"path":"https://ssi-dk.github.io/SCDB/reference/nrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nrow() but also works on remote tables — nrow","text":".data (data.frame(1), tibble(1), data.table(1), tbl_dbi(1)) Data object.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/nrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nrow() but also works on remote tables — nrow","text":"number records object.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/nrow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"nrow() but also works on remote tables — nrow","text":"","code":"conn <- get_connection()    m <- dplyr::copy_to(conn, mtcars)   nrow(m) == nrow(mtcars) # TRUE #> [1] TRUE    close_connection(conn)"},{"path":"https://ssi-dk.github.io/SCDB/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ssi-dk.github.io/SCDB/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs () value magrittr placeholder. rhs () function call using magrittr semantics.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/pipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipe operator — %>%","text":"","code":"1:10 %>% sum() #> [1] 55"},{"path":"https://ssi-dk.github.io/SCDB/reference/schema_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if a schema exists in given connection — schema_exists","title":"Test if a schema exists in given connection — schema_exists","text":"Test schema exists given connection","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/schema_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if a schema exists in given connection — schema_exists","text":"","code":"schema_exists(conn, schema)"},{"path":"https://ssi-dk.github.io/SCDB/reference/schema_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if a schema exists in given connection — schema_exists","text":"conn (DBIConnection(1)) Connection object. schema (character(1)) schema name test existence .","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/schema_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if a schema exists in given connection — schema_exists","text":"TRUE given schema found conn.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/schema_exists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if a schema exists in given connection — schema_exists","text":"","code":"conn <- get_connection()    schema_exists(conn, \"test\") #> [1] FALSE    close_connection(conn)"},{"path":"https://ssi-dk.github.io/SCDB/reference/slice_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Slices a data object based on time / date — slice_time","title":"Slices a data object based on time / date — slice_time","text":"Slices data object based time / date","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/slice_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slices a data object based on time / date — slice_time","text":"","code":"slice_time(.data, slice_ts, from_ts = \"from_ts\", until_ts = \"until_ts\")"},{"path":"https://ssi-dk.github.io/SCDB/reference/slice_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slices a data object based on time / date — slice_time","text":".data (data.frame(1), tibble(1), data.table(1), tbl_dbi(1)) Data object. slice_ts (POSIXct(1), Date(1), character(1)) time / date slice . from_ts, until_ts (character(1)) name columns .data specifying valid valid time.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/slice_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Slices a data object based on time / date — slice_time","text":"object class .data","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/slice_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Slices a data object based on time / date — slice_time","text":"","code":"conn <- get_connection()    m <- mtcars %>%     dplyr::mutate(       \"from_ts\" = dplyr::if_else(dplyr::row_number() > 10,                                  as.Date(\"2020-01-01\"),                                  as.Date(\"2021-01-01\")),       \"until_ts\" = as.Date(NA))    dplyr::copy_to(conn, m, name = \"mtcars\", temporary = FALSE)    q <- dplyr::tbl(conn, id(\"mtcars\", conn)) #> Error: `id()` was deprecated in dplyr 0.5.0 and is now defunct. #> ℹ Please use `vctrs::vec_group_id()` instead.    nrow(slice_time(q, \"2020-01-01\")) # 10 #> Error in pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE): 1 assertions failed: #>  * Variable '.data': One of the following must apply: * #>  * checkmate::check_class(.data): Must inherit from class 'tbl_dbi', * #>  * but has class 'function' * checkmate::check_data_frame(.data): Must #>  * be of type 'data.frame', * not 'closure' * #>  * checkmate::check_data_table(.data): Must be a data.table, not * #>  * closure * checkmate::check_tibble(.data): Must be a tibble, not #>  * closure.   nrow(slice_time(q, \"2021-01-01\")) # nrow(mtcars) #> Error in pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE): 1 assertions failed: #>  * Variable '.data': One of the following must apply: * #>  * checkmate::check_class(.data): Must inherit from class 'tbl_dbi', * #>  * but has class 'function' * checkmate::check_data_frame(.data): Must #>  * be of type 'data.frame', * not 'closure' * #>  * checkmate::check_data_table(.data): Must be a data.table, not * #>  * closure * checkmate::check_tibble(.data): Must be a tibble, not #>  * closure.    close_connection(conn)"},{"path":"https://ssi-dk.github.io/SCDB/reference/table_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if a table exists in database — table_exists","title":"Test if a table exists in database — table_exists","text":"functions attempts determine existence given table. character input given, matching done heuristically assuming \"schema.table\" notation. schema implied case, default schema assumed.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/table_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if a table exists in database — table_exists","text":"","code":"table_exists(conn, db_table)  # S3 method for class 'DBIConnection' table_exists(conn, db_table)"},{"path":"https://ssi-dk.github.io/SCDB/reference/table_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if a table exists in database — table_exists","text":"conn (DBIConnection(1)) Connection object. db_table (id-like object(1)) table specification (coercible id()).","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/table_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if a table exists in database — table_exists","text":"TRUE db_table can parsed table found conn.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/table_exists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if a table exists in database — table_exists","text":"","code":"conn <- get_connection()    dplyr::copy_to(conn, mtcars, name = \"mtcars\", temporary = FALSE)   dplyr::copy_to(conn, iris, name = \"iris\")    table_exists(conn, \"mtcars\")    # TRUE #> [1] TRUE   table_exists(conn, \"iris\")      # FALSE #> [1] FALSE   table_exists(conn, \"temp.iris\") # TRUE #> [1] TRUE    close_connection(conn)"},{"path":"https://ssi-dk.github.io/SCDB/reference/unique_table_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a name for a temporary table — unique_table_name","title":"Create a name for a temporary table — unique_table_name","text":"function heavily inspired unexported dbplyr function unique_table_name","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/unique_table_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a name for a temporary table — unique_table_name","text":"","code":"unique_table_name(scope = \"SCDB\")"},{"path":"https://ssi-dk.github.io/SCDB/reference/unique_table_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a name for a temporary table — unique_table_name","text":"scope (character(1)) naming scope generate table name within.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/unique_table_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a name for a temporary table — unique_table_name","text":"character string table name based given scope parameter","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/unique_table_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a name for a temporary table — unique_table_name","text":"","code":"print(unique_table_name()) # SCDB_<10 alphanumerical letters> #> SCDB_HcXq3OSn2e   print(unique_table_name()) # SCDB_<10 alphanumerical letters> #> SCDB_Xl258RgjzX    print(unique_table_name(\"test\")) # test_<10 alphanumerical letters> #> test_6JVzH3QNth   print(unique_table_name(\"test\")) # test_<10 alphanumerical letters> #> test_ByrdeDhSCD"},{"path":"https://ssi-dk.github.io/SCDB/reference/unite.tbl_dbi.html","id":null,"dir":"Reference","previous_headings":"","what":"tidyr::unite for tbl_dbi — unite.tbl_dbi","title":"tidyr::unite for tbl_dbi — unite.tbl_dbi","text":"Convenience function paste together multiple columns one.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/unite.tbl_dbi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tidyr::unite for tbl_dbi — unite.tbl_dbi","text":"","code":"unite.tbl_dbi(data, col, ..., sep = \"_\", remove = TRUE, na.rm = FALSE)"},{"path":"https://ssi-dk.github.io/SCDB/reference/unite.tbl_dbi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tidyr::unite for tbl_dbi — unite.tbl_dbi","text":"data data frame. col name new column, string symbol. argument passed expression supports quasiquotation (can unquote strings symbols). name captured expression rlang::ensym() (note kind interface symbols represent actual objects now discouraged tidyverse; support backward compatibility). ... <tidy-select> Columns unite sep Separator use values. remove TRUE, remove input columns output data frame. na.rm TRUE, missing values removed prior uniting value.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/unite.tbl_dbi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tidyr::unite for tbl_dbi — unite.tbl_dbi","text":"tbl_dbi specified columns united new column named according \"col\".","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/SCDB/reference/unite.tbl_dbi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tidyr::unite for tbl_dbi — unite.tbl_dbi","text":"","code":"library(tidyr, warn.conflicts = FALSE)    df <- expand_grid(x = c(\"a\", NA), y = c(\"b\", NA))    unite(df, \"z\", x:y, remove = FALSE) #> # A tibble: 4 × 3 #>   z     x     y     #>   <chr> <chr> <chr> #> 1 a_b   a     b     #> 2 a_NA  a     NA    #> 3 NA_b  NA    b     #> 4 NA_NA NA    NA       # To remove missing values:   unite(df, \"z\", x:y, na.rm = TRUE, remove = FALSE) #> # A tibble: 4 × 3 #>   z     x     y     #>   <chr> <chr> <chr> #> 1 \"a_b\" a     b     #> 2 \"a\"   a     NA    #> 3 \"b\"   NA    b     #> 4 \"\"    NA    NA       # Separate is almost the complement of unite   unite(df, \"xy\", x:y) %>%     separate(xy, c(\"x\", \"y\")) #> # A tibble: 4 × 2 #>   x     y     #>   <chr> <chr> #> 1 a     b     #> 2 a     NA    #> 3 NA    b     #> 4 NA    NA      # (but note `x` and `y` contain now \"NA\" not NA)"},{"path":"https://ssi-dk.github.io/SCDB/reference/update_snapshot.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a historical table — update_snapshot","title":"Update a historical table — update_snapshot","text":"update_snapshots makes easy create update historical data table remote (SQL) server. function takes data (.data) looks given point time (timestamp) updates (creates) remote table identified db_table. update stores changes new data (.data) data currently stored remote. way, data can reconstructed looked point time taking little space possible. See vignette(\"basic-principles\") introduction function.","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/update_snapshot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a historical table — update_snapshot","text":"","code":"update_snapshot(   .data,   conn,   db_table,   timestamp,   filters = NULL,   message = NULL,   tic = Sys.time(),   logger = NULL,   enforce_chronological_order = TRUE )"},{"path":"https://ssi-dk.github.io/SCDB/reference/update_snapshot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a historical table — update_snapshot","text":".data (data.frame(1), tibble(1), data.table(1), tbl_dbi(1)) Data object. conn (DBIConnection(1)) Connection object. db_table (id-like object(1)) table specification (coercible id()). timestamp (POSIXct(1), Date(1), character(1)) timestamp describing data processed (current time). filters (data.frame(1), tibble(1), data.table(1), tbl_dbi(1)) object subset data . filters NULL, filtering occurs. Otherwise, inner_join() performed using columns filter object. message (character(1)) message add log-file (useful supplying metadata log). tic (POSIXct(1)) timestamp computation began. supplied, created call-time (used accurately convey runtime update process). logger (Logger(1)) configured logging object. none given, one initialized default arguments. enforce_chronological_order (logical(1)) updates allowed chronologically earlier latest update?","code":""},{"path":"https://ssi-dk.github.io/SCDB/reference/update_snapshot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a historical table — update_snapshot","text":"return value, called side effects.","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/SCDB/reference/update_snapshot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a historical table — update_snapshot","text":"","code":"conn <- get_connection()    data <- dplyr::copy_to(conn, mtcars)    # Copy the first 3 records   update_snapshot(     head(data, 3),     conn = conn,     db_table = \"test.mtcars\",     timestamp = Sys.time()   ) #> Warning: `log_path` and `log_tbl` are both `NULL` and therefore NO file or database logging will be done. #> Consider adding options SCDB.log_table_id and/or SCDB.log_path to your .Rprofile #> 2025-02-03 13:45:10.631 - runner - INFO - Started #> 2025-02-03 13:45:10.631 - runner - INFO - Parsing data for table main.test.mtcars started #> 2025-02-03 13:45:10.631 - runner - INFO - Given timestamp for table is 2025-02-03 13:45:10.631759 #> 2025-02-03 13:45:10.946 - runner - INFO - Deactivating records #> 2025-02-03 13:45:10.976 - runner - INFO - After to_remove #> 2025-02-03 13:45:10.978 - runner - INFO - Deactivate records count: 0 #> 2025-02-03 13:45:10.978 - runner - INFO - Adding new records #> 2025-02-03 13:45:11.013 - runner - INFO - After to_add #> 2025-02-03 13:45:11.015 - runner - INFO - Insert records count: 3 #> 2025-02-03 13:45:11.044 - runner - INFO - Continuous records collapsed: 0 #> 2025-02-03 13:45:11.044 - runner - INFO - Finished processing for table main.test.mtcars #> NULL    # Update with the first 5 records   update_snapshot(     head(data, 5),     conn = conn,     db_table = \"test.mtcars\",     timestamp = Sys.time()   ) #> Warning: `log_path` and `log_tbl` are both `NULL` and therefore NO file or database logging will be done. #> Consider adding options SCDB.log_table_id and/or SCDB.log_path to your .Rprofile #> 2025-02-03 13:45:11.055 - runner - INFO - Started #> 2025-02-03 13:45:11.055 - runner - INFO - Parsing data for table main.test.mtcars started #> 2025-02-03 13:45:11.055 - runner - INFO - Given timestamp for table is 2025-02-03 13:45:11.055203 #> 2025-02-03 13:45:11.453 - runner - INFO - Deactivating records #> 2025-02-03 13:45:11.484 - runner - INFO - After to_remove #> 2025-02-03 13:45:11.485 - runner - INFO - Deactivate records count: 0 #> 2025-02-03 13:45:11.485 - runner - INFO - Adding new records #> 2025-02-03 13:45:11.517 - runner - INFO - After to_add #> 2025-02-03 13:45:11.518 - runner - INFO - Insert records count: 2 #> 2025-02-03 13:45:11.547 - runner - INFO - Continuous records collapsed: 0 #> 2025-02-03 13:45:11.547 - runner - INFO - Finished processing for table main.test.mtcars #> NULL    dplyr::tbl(conn, \"test.mtcars\") #> # Source:   table<`test.mtcars`> [?? x 14] #> # Database: sqlite 3.47.1 [:memory:] #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb checksum     #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>        #> 1  21       6   160   110  3.9   2.62  16.5     0     1     4     4 1da1bd6281e… #> 2  21       6   160   110  3.9   2.88  17.0     0     1     4     4 7a302dae353… #> 3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1 0532ea093ca… #> 4  21.4     6   258   110  3.08  3.22  19.4     1     0     3     1 7ff73a7388d… #> 5  18.7     8   360   175  3.15  3.44  17.0     0     0     3     2 613d84d8ade… #> # ℹ 2 more variables: from_ts <chr>, until_ts <dbl>    close_connection(conn)"},{"path":[]},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"New features","title":"SCDB 0.5.0","text":"Added function create_index() allow easy creating index table (#137).","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"improvements-and-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Improvements and Fixes","title":"SCDB 0.5.0","text":"update_snapshot() optimized now runs faster supported backends (#137). *_joins() can now take dplyr::join_by() argument na_by argument given (#156). SCDB made backwards compatibility R >= 3.6 (#164). nrow() now always returns integers (#163). interlace_sql fully deprecated removed (#169).","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"documentation-0-5-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"SCDB 0.5.0","text":"vignette including benchmarks update_snapshot() across various backends added (#138).","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"scdb-041","dir":"Changelog","previous_headings":"","what":"SCDB 0.4.1","title":"SCDB 0.4.1","text":"CRAN release: 2024-10-03","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"improvements-and-fixes-0-4-1","dir":"Changelog","previous_headings":"","what":"Improvements and Fixes","title":"SCDB 0.4.1","text":"Logger now correctly writes “catalog” field backends support (#149). get_schema() now correctly returns temporary schema PostgreSQL backends (#139). get_tables() now returns catalog DuckDB backends (#145). unique_table_names() now uses random alphanumerics form unique name instead tracking via options (#158).","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"documentation-0-4-1","dir":"Changelog","previous_headings":"","what":"Documentation","title":"SCDB 0.4.1","text":"Deprecated check_from argument longer used dbplyr calls (#136).","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"testing-0-4-1","dir":"Changelog","previous_headings":"","what":"Testing","title":"SCDB 0.4.1","text":"Improved tests get_tables() (#145).","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"scdb-040","dir":"Changelog","previous_headings":"","what":"SCDB 0.4.0","title":"SCDB 0.4.0","text":"CRAN release: 2024-03-21","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"breaking-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGES:","title":"SCDB 0.4.0","text":"Table identification now specific (#93). SCDB functions allow tables specified character representation “[catalog].schema.table”. , schema implied context, SCDB attempt match table among permanent temporary tables. Now, always assume lack schema means default schema used. also case DBI::Id() used without schema specification. show_temporary argument get_tables() now simple logical (#93). addition, schema always returned list tables (longer NA default schema). Tables created create_table() now temporary permanent dependent default value DBI::dbCreateTable() (#93). wish overwrite , use ... arguments passed DBI::dbCreateTable(). %notin% operator removed package (#96). db_table_id argument create_table(), get_table(), table_exists() id() renamed db_table (#115). object coercible id() can now passed functions. order arguments create_logs_if_missing() swapped match rest package (#96). conn argument now log_table argument. arguments Logger updated (#98): db_tablestring replaced db_table argument. argument takes input coercible id() instead allowing character string. ts replaced timestamp argument align update_snapshot(). order input arguments Logger changed (#98). interlace_sql() function deprecated favor S3 generic interlace() (#113).","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"New features","title":"SCDB 0.4.0","text":"Added support DuckDB (#121). S3 method .character.Id() added converts DBI::Id() character (#93). new id.data.frame() converts data.frame DBI::Id() (#108). Useful combination get_tables(conn, pattern). new get_catalog() function added give specific table identification (#99). new clean function, defer_db_cleanup(), added (#89). passing tbl_sql object function, corresponding table deleted parent function exits. new function, unique_table_name(), generate unique table names added (#89). function heavily inspired unexported dbplyr:::unique_table_name(). logger introduced LoggerNull (#98): Logger facilitates logging file/console logging database. LoggerNull “-logging” logger can used suppress logging. Added set helper functions prevent race conditions writing data bases (#104). See lock_table() unlock_table().","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"improvements-and-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Improvements and Fixes","title":"SCDB 0.4.0","text":"Improvements create_table() (#93): now writes table remote connection given. , create table corresponding columns. can now create temporary tables Microsoft SQL Server. Improved checks get_connection() (#83): given, host need look like IP address (e.g. “localhost” unrealistic). character input port allowed string digits. Now checks timezone timezone_out IANA time zone. digest_to_checksum() improved performance Microsoft SQL Server use built-HashBytes function (#97). table_exists() now correctly gives ambiguity warning Microsoft SQL Server PostgreSQL backends (#80). get_tables() now supports temporary tables Microsoft SQL Server (#93). get_schema() updated (#107): now always return schema (either directly object inferred id()). temporary argument added get temporary schemas DBIConnections. id() now includes information catalog cases (#99, #107). Fixed dplyr joins failing testthat installed (#90). footprint update_snapshot() reduced cleaning intermediate tables defer_db_cleanup() (#89) update_snapshot() now attempts get lock table updated updating (#104). Logger$log_info() now uses message() instead cat() write console (#98). message written now also returned invisibly.","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"testing-0-4-0","dir":"Changelog","previous_headings":"","what":"Testing","title":"SCDB 0.4.0","text":"Added missing tests create_logs_if_missing() (#93). Added missing tests get_schema() (#99). Added missing tests get_catalog() (#107). Improved tests get_tables(), table_exists(), create_table() (#93). Improved tests Logger (#98).","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"scdb-03","dir":"Changelog","previous_headings":"","what":"SCDB 0.3","title":"SCDB 0.3","text":"CRAN release: 2024-01-13 Added support Microsoft SQL Server using ODBC (#77).","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"minor-improvements-and-fixes-0-3","dir":"Changelog","previous_headings":"","what":"Minor Improvements and Fixes","title":"SCDB 0.3","text":"Implementation *_joins improved, now extending dplyr::*_joins rather masking (#77). Added S3 method id.tbl_dbi(), returning DBI::Id() instance matching table (#72). Calling id() tbl_dbi thus allows retrieve schema even initially given. Fixed update_snapshot() working DBI::Id() instance db_table argument (#72). Suppressed recurring messages dbplyr >= 2.4.0 table names containing . (#72). Added show_temp option get_tables() allow retrieving temporary tables (#72).","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"other-news-0-3","dir":"Changelog","previous_headings":"","what":"Other news","title":"SCDB 0.3","text":"Maintainer changed Rasmus Skytte Randløv (@RasmusSkytte).","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"scdb-021","dir":"Changelog","previous_headings":"","what":"SCDB 0.2.1","title":"SCDB 0.2.1","text":"CRAN release: 2023-11-30","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"minor-improvements-and-fixes-0-2-1","dir":"Changelog","previous_headings":"","what":"Minor Improvements and Fixes","title":"SCDB 0.2.1","text":"SQLite connections now support schemata similar backends (#67). package logo slightly altered readable clock (#49). Added vignette describing concept slowly changing dimension using examples (#53). Added Logger$finalize method, removes log_file database writing file (#66).","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"other-news-0-2-1","dir":"Changelog","previous_headings":"","what":"Other news","title":"SCDB 0.2.1","text":"Maintainer changed Marcus Munch Grünewald (#59).","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"scdb-02","dir":"Changelog","previous_headings":"","what":"SCDB 0.2","title":"SCDB 0.2","text":"CRAN release: 2023-09-26","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"breaking-changes-0-2","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"SCDB 0.2","text":"update_snapshot() now take Logger object logger argument instead log_path log_table_id arguments (#24). Logger\\$log_filename changed Logger\\$log_basename reduce ambiguity.","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"new-features-0-2","dir":"Changelog","previous_headings":"","what":"New features","title":"SCDB 0.2","text":"Package functions now also tested RPostgres::Postgres(), therefore now officially supported (#31). get_connection() shows warning unsupported backend used (#26). Increased flexibility Logger object (#21 #24): Logger instance may now created arguments. Suppress console output output_to_console (TRUE default). log_path set, Logger fail trying write file. Logger\\$log_realpath gives full path log file written.","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"minor-improvements-and-fixes-0-2","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"SCDB 0.2","text":"schema_exists correctly detects schema tables (#30). db_timestamps now newer calls translate_sql con = NULL (#37). Package description updated use footnote CRAN.","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"known-issues-0-2","dir":"Changelog","previous_headings":"","what":"Known issues","title":"SCDB 0.2","text":"schema_exists empty schema tests creating new table, may cause issues user sufficient privileges.","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"scdb-01","dir":"Changelog","previous_headings":"","what":"SCDB 0.1","title":"SCDB 0.1","text":"CRAN release: 2023-08-28","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"features-0-1","dir":"Changelog","previous_headings":"","what":"Features","title":"SCDB 0.1","text":"Functions handle database connections: get_connection(), close_connection(), id() Functions interface database: get_tables(), table_exists(), get_schema(), schema_exists() Functions create “historical” tables logs: create_table(), create_logs_if_missing() Function maintain “historical” tables: update_snapshot() Functions interface “historical” tables: get_table(), slice_time(), .historical() Functions facilitate faster joins NAs SQL backends: full_join(), inner_join(), left_join(), right_join() Functions manipulate tables SQL backends: filter_keys(), unite.tbl_dbi(), interlace_sql() logging object facilitate logging: Logger() Function generate checksums: digest_to_checksum() Function write timestamps tables SQL backends: db_timestamp() Helper functions: nrow() - database compliant nrow() %notin% - negated %%","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"testing-0-1","dir":"Changelog","previous_headings":"","what":"Testing","title":"SCDB 0.1","text":"package functions tested .","code":""},{"path":"https://ssi-dk.github.io/SCDB/news/index.html","id":"documentation-0-1","dir":"Changelog","previous_headings":"","what":"Documentation","title":"SCDB 0.1","text":"functions fully documented.","code":""}]
