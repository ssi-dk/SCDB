% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/db_joins.R
\name{joins}
\alias{joins}
\alias{inner_join}
\alias{left_join}
\alias{right_join}
\alias{full_join}
\alias{semi_join}
\alias{anti_join}
\title{SQL Joins}
\usage{
inner_join(x, y, by = NULL, na_by = NULL, ...)

left_join(x, y, by = NULL, na_by = NULL, ...)

right_join(x, y, by = NULL, na_by = NULL, ...)

full_join(x, y, by = NULL, na_by = NULL, ...)

semi_join(x, y, by = NULL, na_by = NULL, ...)

anti_join(x, y, by = NULL, na_by = NULL, ...)
}
\arguments{
\item{x, y}{A pair of lazy data frames backed by database queries.}

\item{by}{A join specification created with \code{\link[dplyr:join_by]{join_by()}}, or a character
vector of variables to join by.

If \code{NULL}, the default, \verb{*_join()} will perform a natural join, using all
variables in common across \code{x} and \code{y}. A message lists the variables so
that you can check they're correct; suppress the message by supplying \code{by}
explicitly.

To join on different variables between \code{x} and \code{y}, use a \code{\link[dplyr:join_by]{join_by()}}
specification. For example, \code{join_by(a == b)} will match \code{x$a} to \code{y$b}.

To join by multiple variables, use a \code{\link[dplyr:join_by]{join_by()}} specification with
multiple expressions. For example, \code{join_by(a == b, c == d)} will match
\code{x$a} to \code{y$b} and \code{x$c} to \code{y$d}. If the column names are the same between
\code{x} and \code{y}, you can shorten this by listing only the variable names, like
\code{join_by(a, c)}.

\code{\link[dplyr:join_by]{join_by()}} can also be used to perform inequality, rolling, and overlap
joins. See the documentation at \link[dplyr:join_by]{?join_by} for details on
these types of joins.

For simple equality joins, you can alternatively specify a character vector
of variable names to join by. For example, \code{by = c("a", "b")} joins \code{x$a}
to \code{y$a} and \code{x$b} to \code{y$b}. If variable names differ between \code{x} and \code{y},
use a named character vector like \code{by = c("x_a" = "y_a", "x_b" = "y_b")}.

To perform a cross-join, generating all combinations of \code{x} and \code{y}, see
\code{\link[dplyr:cross_join]{cross_join()}}.}

\item{na_by}{columns that should match on NA}

\item{...}{Other parameters passed onto methods.}
}
\description{
Overloads the dplyr \emph{_join to accept an na_by argument.
By default, joining using SQL does not match on NA / NULL.
dbplyr has the option "na_matches = na" to match on NA / NULL but this is very inefficient
This function does the matching more efficiently.
If a column contains NA / NULL, give the argument to na_by to match during the join
If no na_by is given, the function defaults to using dplyr::}_join
}
\seealso{
\link[dplyr:mutate-joins]{dplyr::mutate-joins} which this function wraps.

\link[dbplyr:join.tbl_sql]{dbplyr::join.tbl_sql} which this function wraps.
}
