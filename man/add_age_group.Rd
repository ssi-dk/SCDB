% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/db_manipulating_functions.R
\name{add_age_group}
\alias{add_age_group}
\title{Add a custom age group to data}
\usage{
add_age_group(
  .data,
  age_cuts,
  age_group = "age_group",
  key = NULL,
  birth = "birth",
  valid_from = "valid_from",
  valid_until = "valid_until"
)
}
\arguments{
\item{.data}{lazy_query to parse (must contain birthdate, valid_from and valid_until columns)}

\item{age_cuts}{The lower bound of the groups (0 is implicitly included)}

\item{age_group}{Name of the column to place the new age_groups in (default "age_group")}

\item{key}{Name of the column with personal identification number}

\item{birth}{Name of the column with birthdates}

\item{valid_from}{Name of the column with valid_from dates (default "valid_from")}

\item{valid_until}{Name of the column with valid_until dates (default "valid_until")}
}
\value{
A copy of .data with the age_group added (interlaced) such that new valid_from and valid_until columns are added
}
\description{
Add a custom age group to data
}
\examples{
conn <- get_connection()

birth <- as.Date(c("1961-01-01", "1991-01-01"))

data <- rbind(
   data.frame(key = c("A", "B"), birth,
              valid_from = birth, valid_until = birth + years(25), age_gr = "00-24"),
   data.frame(key = c("A", "B"), birth,
              valid_from = birth + years(25), valid_until = NA_Date_, age_gr = "25+")) \%>\%
  dplyr::copy_to(conn, .)

data |>
     add_age_group(age_cuts = c(18, 60), key = "key")

data |>
     add_age_group(age_cuts = c(18, 60), key = "key", age_group = "age_group_3")

close_connection(conn)
}
