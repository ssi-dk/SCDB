% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/locks.R
\name{db_locks}
\alias{db_locks}
\alias{add_table_lock}
\alias{remove_table_lock}
\alias{is_lock_owner}
\alias{remove_expired_locks}
\title{Sets, queries and removes locks for db tables}
\usage{
add_table_lock(conn, db_table, schema = NULL)

remove_table_lock(conn, db_table, schema = NULL)

is_lock_owner(conn, db_table, schema = NULL)

remove_expired_locks(
  conn,
  schema = NULL,
  lock_wait_max = getOption("SCDB.lock_wait_max")
)
}
\arguments{
\item{conn}{An object that inherits from DBIConnection (as generated by get_connection())'}

\item{db_table}{(\code{character(1)})\cr
A specification of "schema.table" to modify lock for.}

\item{schema}{(\code{character(1)})\cr
The schema where the "locks" table should be created.}

\item{lock_wait_max}{(\code{numeric(1)})\cr
The number of seconds to wait before marking lock as expired.}
}
\value{
Most have return value (called for side effects).
\code{is_lock_owner()} returns the TRUE if the process can modify the table.
}
\description{
This set of function adds a simple locking system to db tables.
\itemize{
\item \code{add_table_lock()} adds a record in the schema.locks table with the current time and R-session process id.
\item \code{remove_table_lock()} removes records in the schema.locks table with the target table and the
R-session process id.
\item \code{is_lock_owner()} returns \code{TRUE} if the current process id (pid) matches the pid associated with the lock on
db_table in schema.locks. If no lock is found, \code{NULL} is returned.
\item \code{remove_expired_locks()} removes locks that are timed out or where the process owning the lock is exited.
}
}
\examples{
  conn <- DBI::dbConnect(RSQLite::SQLite())

  is_lock_owner(conn, "test_table") # NULL

  add_table_lock(conn, "test_table")
  is_lock_owner(conn, "test_table") # TRUE

  remove_table_lock(conn, "test_table")
  is_lock_owner(conn, "test_table") # NULL

  DBI::dbDisconnect(conn)
}
