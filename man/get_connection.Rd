% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/connection.R
\name{get_connection}
\alias{get_connection}
\title{Opens connection to the database}
\usage{
get_connection(
  drv = RPostgres::Postgres(),
  host = NULL,
  port = NULL,
  dbname = NULL,
  user = NULL,
  password = NULL,
  timezone = NULL,
  timezone_out = NULL,
  ...,
  bigint = "integer",
  check_interrupts = TRUE
)
}
\arguments{
\item{drv}{(\code{DBIDriver(1)} or \code{DBIConnection(1)})\cr
The driver for the connection.}

\item{host}{(\code{character(1)})\cr
The ip of the host to connect to.}

\item{port}{(\code{numeric(1)} or \code{character(1)})\cr
Host port to connect to.}

\item{dbname}{(\code{character(1)})\cr
Name of the database located at the host.}

\item{user}{(\code{character(1)})\cr
Username to login with.}

\item{password}{(\code{character(1)})\cr
Password to login with.}

\item{timezone}{(\code{character(1)})\cr
Sets the timezone of DBI::dbConnect(). Must be in \code{\link[=OlsonNames]{OlsonNames()}}.}

\item{timezone_out}{(\code{character(1)})\cr
Sets the timezone_out of DBI::dbConnect(). Must be in \code{\link[=OlsonNames]{OlsonNames()}}.}

\item{...}{Additional parameters sent to DBI::dbConnect().}

\item{bigint}{The R type that 64-bit integer types should be mapped to,
default is \link[bit64:bit64-package]{bit64::integer64}, which allows the full range of 64 bit
integers.}

\item{check_interrupts}{Should user interrupts be checked during the query execution (before
first row of data is available)? Setting to \code{TRUE} allows interruption of queries
running too long.}
}
\value{
An object that inherits from \code{DBIConnection} driver specified in \code{drv}.
}
\description{
Connects to the specified dbname of host:port using user and password from given arguments.
Certain drivers may use credentials stored in a file, such as ~/.pgpass (PostgreSQL).
}
\examples{
\dontshow{if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
  conn <- get_connection(drv = RSQLite::SQLite(), dbname = ":memory:")

  DBI::dbIsValid(conn) # TRUE

  close_connection(conn)

  DBI::dbIsValid(conn) # FALSE
\dontshow{\}) # examplesIf}
}
\seealso{
\link[RPostgres:Postgres]{RPostgres::Postgres}
}
